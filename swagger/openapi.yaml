openapi: 3.1.0
info:
  title: Content Service API
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Dev server
  - url: http://localhost:3333
    description: Staging server
paths:
  /service/manage/auth/signup:
    post:
      summary: Member signup
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberSignupRequest'
      responses:
        '200':
          description: Successful signup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberSignupResponse'
              example:
                account: "user123"
                email: "user@example.com"
        '400':
          description: Validation error
        '409':
          description: Account already exists

  /service/manage/auth/signin:
    post:
      summary: Member signin
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberSigninRequest'
      responses:
        '200':
          description: Successful signin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberSigninResponse'
        '401':
          description: Unauthorized

  /service/manage/auth/signout:
    get:
      summary: Member signout (GET)
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully signed out
    post:
      summary: Member signout (POST)
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully signed out

  /service/manage/content:
    post:
      summary: Create a new content
      tags:
        - Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentDto'
            example:
              id: null
              matter:
                title: "はじめての記事"
                description: "記事の概要"
                date: "2025-09-29T08:00:00Z"
                draft: false
                tags: ["Rust", "Axum"]
                categories: ["プログラミング", "チュートリアル"]
              body: "ここに記事本文を記載します。"
      responses:
        '200':
          description: Content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentDto'
              example:
                id: "xxxxxxxx-uuid-1234-5678-xxxxxxxxxxxx"
                matter:
                  title: "はじめての記事"
                  description: "記事の概要"
                  date: "2025-09-29T08:00:00Z"
                  draft: false
                  tags: ["Rust", "Axum"]
                  categories: ["プログラミング", "チュートリアル"]
                body: "ここに記事本文を記載します。"
        '400':
          description: Validation error
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    put:
      summary: Update content
      tags:
        - Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentDto'
            example:
              id: "xxxxxxxx-uuid-1234-5678-xxxxxxxxxxxx"
              matter:
                title: "編集後の記事タイトル"
                description: "編集後の記事の概要"
                date: "2025-09-29T08:00:00Z"
                draft: false
                tags: ["Rust", "Axum"]
                categories: ["プログラミング", "チュートリアル"]
              body: "編集後の本文"
      responses:
        '200':
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentDto'
              example:
                id: "abc123"
                matter:
                  title: "編集後の記事タイトル"
                  description: "編集後の記事の概要"
                  date: "2025-09-29T08:00:00Z"
                  draft: false
                  tags: ["Rust", "Axum"]
                  categories: ["プログラミング", "チュートリアル"]
                body: "編集後の本文"
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '404':
          description: Content not found
      security:
        - bearerAuth: []

  /service/manage/content/{id}:
    delete:
      summary: Delete content by ID
      tags:
        - Content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: "xxxxxxxx-uuid-1234-5678-xxxxxxxxxxxx"
      responses:
        '200':
          description: Content deleted successfully
        '404':
          description: Content not found
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /service/manage/content/search:
    get:
      summary: Get paginated content list
      tags:
        - Content
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Paginated content list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseDto'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    post:
      summary: Search content (POST)
      tags:
        - Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestDto'
            example:
              word: "記事"
              draft: null
              date_from: "2025-09-01T00:00:00Z"
              date_to: "2025-09-30T23:59:59Z"
              tags: ["Rust", "Axum"]
              categories: ["プログラミング", "チュートリアル"]
              page: 1
              per_page: 10
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseDto'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /service/manage/content/tags/{limit}:
    get:
      summary: Get most used tags
      tags:
        - Content
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: Number of tags to return
      responses:
        '200':
          description: List of tags with counts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    oneOf:
                      - type: string
                      - type: integer
                  example: ["Rust", 1]
              example:
                - ["Rust", 1]
                - ["Axum", 1]
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /service/manage/content/categories/{limit}:
    get:
      summary: Get most used caregories
      tags:
        - Content
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: Number of tags to return
      responses:
        '200':
          description: List of tags with counts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    oneOf:
                      - type: string
                      - type: integer
                  example: ["プログラミング", 1]
              example:
                - ["プログラミング", 1]
                - ["チュートリアル", 1]
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []



  /service/content/search:
    get:
      summary: Get paginated content list
      tags:
        - Public Content
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Paginated content list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseDto'

    post:
      summary: Search content (POST)
      tags:
        - Public Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequestDto'
            example:
              word: "記事"
              draft: false   # 無視されるため常に false
              date_from: "2025-09-01T00:00:00Z"
              date_to: "2025-09-30T23:59:59Z"
              tags: ["Rust", "Axum"]
              categories: ["プログラミング", "チュートリアル"]
              page: 1
              per_page: 10
      description: |
        The `draft` field in the request body is ignored. All results returned will have `draft=false`.
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponseDto'

  /service/content/tags/{limit}:
    get:
      summary: Get most used tags
      tags:
        - Public Content
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: Number of tags to return
      responses:
        '200':
          description: List of tags with counts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    oneOf:
                      - type: string
                      - type: integer
                  example: ["Rust", 1]
              example:
                - ["Rust", 1]
                - ["Axum", 1]
        '401':
          description: Unauthorized

  /service/content/categories/{limit}:
    get:
      summary: Get most used caregories
      tags:
        - Public Content
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: Number of tags to return
      responses:
        '200':
          description: List of tags with counts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    oneOf:
                      - type: string
                      - type: integer
                  example: ["プログラミング", 1]
              example:
                - ["プログラミング", 1]
                - ["チュートリアル", 1]
        '401':
          description: Unauthorized



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MemberSignupRequest:
      type: object
      required:
        - account
        - password
        - confirmPassword
      properties:
        account:
          type: string
          example: "user123"
        password:
          type: string
          format: password
          example: "Password1!"
        confirmPassword:
          type: string
          format: password
          example: "Password1!"
        email:
          type: string
          format: email
          example: "user@example.com"

    MemberSignupResponse:
      type: object
      properties:
        account:
          type: string
        email:
          type: string
          nullable: true

    MemberSigninRequest:
      type: object
      required:
        - account
        - password
      properties:
        account:
          type: string
          example: "user123"
        password:
          type: string
          format: password
          example: "Password1!"

    MemberSigninResponse:
      type: object
      properties:
        account:
          type: string
        email:
          type: string
          nullable: true
        token:
          type: string

    ContentDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
          example: null
        matter:
          $ref: '#/components/schemas/FrontMatterDto'
          nullable: true
        body:
          type: string
          nullable: true
          example: "ここに記事本文を記載します。"

    FrontMatterDto:
      type: object
      properties:
        title:
          type: string
          nullable: true
          example: "はじめての記事"
        description:
          type: string
          nullable: true
          example: "記事の概要"
        date:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-29T08:00:00Z"
        draft:
          type: boolean
          nullable: true
          example: true
        tags:
          type: array
          items:
            type: string
          nullable: true
          example: ["Rust", "Axum"]
        categories:
          type: array
          items:
            type: string
          nullable: true
          example: ["プログラミング", "チュートリアル"]

    SearchRequestDto:
      type: object
      properties:
        word:
          type: string
          nullable: true
          example: "記事"
        draft:
          type: boolean
          nullable: true
          example: false
        date_from:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-01T00:00:00Z"
        date_to:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-30T23:59:59Z"
        tags:
          type: array
          items:
            type: string
          nullable: true
          example: ["Rust", "Axum"]
        categories:
          type: array
          items:
            type: string
          nullable: true
          example: ["プログラミング", "チュートリアル"]
        page:
          type: integer
          nullable: true
          example: 1
        per_page:
          type: integer
          nullable: true
          example: 10

    SearchFrontMatterDto:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2025-09-29T08:00:00Z"
        title:
          type: string
          example: "はじめての記事"
        description:
          type: string
          example: "記事の概要"
        draft:
          type: boolean
          example: false
        tags:
          type: array
          items:
            type: string
          example: ["Rust", "Axum"]
        categories:
          type: array
          items:
            type: string
          example: ["プログラミング", "チュートリアル"]

    SearchContentDto:
      type: object
      properties:
        id:
          type: string
          example: "bcb35610-23b6-4de7-9f53-cf87ef9fcd1f"
        matter:
          $ref: '#/components/schemas/SearchFrontMatterDto'

    SearchResponseDto:
      type: object
      properties:
        page:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 10
        maxPage:
          type: integer
          example: 31
        overflow:
          type: boolean
          example: false
        contents:
          type: array
          items:
            $ref: '#/components/schemas/SearchContentDto'
